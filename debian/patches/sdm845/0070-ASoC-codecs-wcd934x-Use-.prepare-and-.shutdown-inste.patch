From: Joel Selvaraj <jo@jsfamily.in>
Date: Thu, 13 Jan 2022 08:52:08 +0530
Subject: ASoC: codecs: wcd934x: Use .prepare and .shutdown instead of
 .trigger

.trigger only gets called when the actual PCM stream gets read/written.
The WIP q6voice driver is kind of a virtual FE for the modem and userspace
doesn't actually read/write PCM streams into it. So the .trigger doesn't get
called and mic doesnt work on calls. We currently use a userspace daemon called
q6voiced to open and prepare the q6voice virtual FE which in turn open and
prepares the BE speaker and mic. So for now, contain the enabling and disabling
of wcd934x as part of .prepare and .shutdown instead of .trigger.
---
 sound/soc/codecs/wcd934x.c | 41 +++++++++++++++++++++--------------------
 1 file changed, 21 insertions(+), 20 deletions(-)

diff --git a/sound/soc/codecs/wcd934x.c b/sound/soc/codecs/wcd934x.c
index 1e75e93..0727a27 100644
--- a/sound/soc/codecs/wcd934x.c
+++ b/sound/soc/codecs/wcd934x.c
@@ -1915,7 +1915,7 @@ static int wcd934x_hw_free(struct snd_pcm_substream *substream,
 	return 0;
 }
 
-static int wcd934x_trigger(struct snd_pcm_substream *substream, int cmd,
+static int wcd934x_prepare(struct snd_pcm_substream *substream,
 			   struct snd_soc_dai *dai)
 {
 	struct wcd_slim_codec_dai_data *dai_data;
@@ -1925,28 +1925,28 @@ static int wcd934x_trigger(struct snd_pcm_substream *substream, int cmd,
 	wcd = snd_soc_component_get_drvdata(dai->component);
 
 	dai_data = &wcd->dai[dai->id];
-
-	switch (cmd) {
-	case SNDRV_PCM_TRIGGER_START:
-	case SNDRV_PCM_TRIGGER_RESUME:
-	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
-		cfg = &dai_data->sconfig;
-		slim_stream_prepare(dai_data->sruntime, cfg);
-		slim_stream_enable(dai_data->sruntime);
-		break;
-	case SNDRV_PCM_TRIGGER_STOP:
-	case SNDRV_PCM_TRIGGER_SUSPEND:
-	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
-		slim_stream_unprepare(dai_data->sruntime);
-		slim_stream_disable(dai_data->sruntime);
-		break;
-	default:
-		break;
-	}
+	cfg = &dai_data->sconfig;
+	
+	slim_stream_prepare(dai_data->sruntime, cfg);
+	slim_stream_enable(dai_data->sruntime);
 
 	return 0;
 }
 
+static void wcd934x_shutdown(struct snd_pcm_substream *substream,
+			   struct snd_soc_dai *dai)
+{
+	struct wcd_slim_codec_dai_data *dai_data;
+	struct wcd934x_codec *wcd;
+
+	wcd = snd_soc_component_get_drvdata(dai->component);
+
+	dai_data = &wcd->dai[dai->id];
+
+	slim_stream_unprepare(dai_data->sruntime);
+	slim_stream_disable(dai_data->sruntime);
+}
+
 static int wcd934x_set_channel_map(struct snd_soc_dai *dai,
 				   unsigned int tx_num, unsigned int *tx_slot,
 				   unsigned int rx_num, unsigned int *rx_slot)
@@ -2032,9 +2032,10 @@ static int wcd934x_get_channel_map(struct snd_soc_dai *dai,
 }
 
 static const struct snd_soc_dai_ops wcd934x_dai_ops = {
+	.prepare = wcd934x_prepare,
+	.shutdown = wcd934x_shutdown,
 	.hw_params = wcd934x_hw_params,
 	.hw_free = wcd934x_hw_free,
-	.trigger = wcd934x_trigger,
 	.set_channel_map = wcd934x_set_channel_map,
 	.get_channel_map = wcd934x_get_channel_map,
 };
